name: backend-cd
on:
  push:
    branches:
      - main
      
jobs:
  Lint_Job:
    runs-on: ubuntu-latest

    steps:
      - name: Check out source repository
        uses: actions/checkout@v3 

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"   
          
      - name: Cache Python dependencies with Pipenv
        uses: actions/cache@v2
        with:
          path: ~/.cache/pipenv
          key: ${{ runner.os }}-pipenv-deps-${{ hashFiles('starter/backend/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-deps-
            
      - name: Install pipenv
        run: |
          cd starter/backend 
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev
        
      - name: flake8 Lint
        id: lint
        run: cd starter/backend &&  pipenv run flake8 --max-line-length=120
        continue-on-error: false
        
      

  TEST_JOB: 
    runs-on: ubuntu-latest
      
    steps:
      - name: Check out source repository
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"   
          
      - name: Cache Python dependencies with Pipenv
        uses: actions/cache@v2
        with:
          path: ~/.cache/pipenv
          key: ${{ runner.os }}-pipenv-deps-${{ hashFiles('starter/backend/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-deps-
            
      - name: Install pipenv
        run: |
          cd starter/backend 
          python -m pip install --upgrade pip
          pip install pipenv 
          pipenv install --dev
          
      - name: Run tests with pytest
        run: cd starter/backend && pipenv run pytest --maxfail=1 --disable-warnings -q
        
      - name: flake8 Lint
        id: lint
        run: cd starter/backend &&  pipenv run flake8 --max-line-length=120
        continue-on-error: false
               

  BUILD_JOB: 
    runs-on: ubuntu-latest
    needs: [Lint_Job, TEST_JOB]
    
    steps:
      - name: Check out code
        uses: actions/checkout@v2
       
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
          
      - name: Install Docker 
        run: |
          sudo apt-get remove docker docker-engine docker.io containerd runc
          sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-compose
          sudo rm -rf /etc/bash_completion.d/docker /usr/local/bin/docker-compose /etc/bash_completion.d/docker-compose
          sudo apt install containerd -y
          sudo apt install -y docker.io docker-compose
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        
     - name: Build Docker image	  
        run: |
          cd starter/backend
          IMAGE_TAG="${{ secrets.AWS_ECR_REPOSITORY_Backend  }}:${{ github.sha }}"
          IMAGE_TAG_LOWERCASE=$(echo $IMAGE_TAG | tr '[:upper:]' '[:lower:]')
          docker build -t "$IMAGE_TAG_LOWERCASE" -f Dockerfile .
          docker tag "$IMAGE_TAG_LOWERCASE" "${{ secrets.AWS_ECR_REPOSITORY_Backend }}:latest"
          
      - name: Push Docker image to ECR	  
        run: |
          cd starter/backend
          IMAGE_TAG="${{ secrets.AWS_ECR_REPOSITORY_Backend  }}:${{ github.sha }}"
          IMAGE_TAG_LOWERCASE=$(echo $IMAGE_TAG | tr '[:upper:]' '[:lower:]')
          docker push "$IMAGE_TAG_LOWERCASE"
          docker push "${{ secrets.AWS_ECR_REPOSITORY_Backend }}:latest"  
        
     

  deploy:
    name: Deploy Backend image to Kubernetes cluster
    needs:
      - BUILD_JOB
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Download kubectl binaries
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      
      - name: Install Kubectl
        run: |
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  
     
      - name: Set up kubectl for EKS
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name cluster
     
      - name: Deploy to Kubernetes
        run: |
          cd starter/backend
          kubectl apply -k k8s/    

      - name: Deploy to EKS
        run: |
          cd "./k8s/"
          kustomize edit set image backend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f -
          kubectl get svc
          kubectl get pods 
